NeuralNetwork:
	Initiate Neural Net:
		NeuralNetwork nn = new NeuralNetwork();

	Add layers:
		first layer and input size: // kiek bus input reiksmiu
			nn.AddLayer(new Layer(node_count, input_dim)) // abu *int*
		second layer:
			nn.AddLayer(new Layer(node_count, use_bias=true/false) // bias default = true
		ir t.t.

	Get layer object:
		nn.layers[int]
		Get layer matrices(weights, bias):
			nn.layers[int].Weigts/Bias
			Debug matrices in Unity console:
				nn.layers[int].Weigts/Bias.MatrixDisplay();

	Mutate: // dar pilnai nefunkcionuoja, nes nemoku local function ir map sukonfiguruot
		nn.Mutate(rate);

	Feedforward:
		nn.Feedforward(double[] inputArr) // output: double[] Arr (dimensions = kiek nodes turi paskutinis layer).

Matrix:
	Get dot product of matrices:
		Matrix.Multiply(Matrix a, Matrix b)
	Map a function to each element (activation function)
		nn.layers[int].Weigts/Bias.Map(Matrix.Sigmoid)
	Add elements of two matrices:
		nn.layers[int].Weigts/Bias/result_matrix.Add(nn.layers[int].Weigts/Bias/result_matrix)
	Convert an array to a Matrix: // Inputai ieis double[] arr forma
		Matrix.FromArray(double[] input)
	Convert from a Matrix to an array:
		Matrix.ToArray(Matrix matrica)


// Default matricas generuoja su reiksmem nuo -1 iki 1, galima pakeisti faile kur yra kuriamos jos, this.Bias = new Matrix(this.Nodes, 1, range_start, range_end);



